.\" Manpage for _printf
.\" Contact https://github.com/mwanjiku56/printf.git for elaborated details
.TH man 1 "05 Oct 2021" "1.0" "_printf man page"
.SH NAME 
	_printf

.SH SYNOPSIS

	#include “main.h”

	Int _printf(const char *format, ...);

.SH DESCRIPTION

	The function in _printf() produces output according tho the format described below. The function writes output to stdout, the standard output stream.

.SH OPTIONS

	c – Prints a character
	s – Prints a string
	% - Prints %
	d – Prints decimal numbers in base 10
	i - Prints integers in base 10
	u – Prints unsigned decimal in base 10
	o – Prints a number in octal (A number with base 8)
	x – Prints a number in hexadecimal in lowercase(A number with base 16)
	X -  Prints a number in hexadecimal in uppercase (A number with base 16)
	S – Prints a string 
	p – Prints the value of a pointer (Address)
	0 – A check protection that fills before the characters if the length is specified
	- - It left-aligns the characters if the length is specified
	r – NOT AVAILABLE
	R – NOT AVAILABLE

.SH EXAMPLES

	int main(void)
	{
		int len;
		int len2;
	
		_printf("Negative:[%d]\n", -762534);
		_printf("Length:[%d, %i]\n", len, len);

		return (0);
	}

.SH SEE ALSO

	The official printf(3) manual – man printf

.SH BUGS

	On out custom _printf function, if you use the r / R format specifier, you will get an error stating that it is unknown.
    
	Code such as printf(foo); often indicates a bug, since foo may contain a % character.  If foo comes from untrusted user input, it may contain %n, causing the printf() call to write to memory and creating a security hole.

.SH AUTHOR
	Mercy Maruga and Michael Kipkemboy
